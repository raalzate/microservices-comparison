buildscript {
    ext {
        springBootVersion = '2.0.0.M3'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

configurations { providedCompile }

configurations {
    all*.exclude module: 'qpid-broker-plugins-management-http'
    all*.exclude module: 'qpid-broker-plugins-websocket'
}

dependencies {
    compile 'com.microsoft.sqlserver:mssql-jdbc:6.2.1.jre8'

    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-actuator'

    compile 'org.apache.shiro:shiro-spring-boot-web-starter:1.4.0'
    compile "org.flywaydb:flyway-core"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.boot:spring-boot-test-autoconfigure'
}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

sourceSets {
    integrationTest {
        java.srcDir file('src/test-integration/java')
        resources.srcDir file('src/test-integration/resources')
        compileClasspath += sourceSets.main.compileClasspath + sourceSets.main.output
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task testIntegration(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['co.com.proteccion.todo.*']
            excludes = ['co.com.proteccion.todo.*.domain.*']
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['co.com.proteccion.todo.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 100
            }
        }
    }
}



